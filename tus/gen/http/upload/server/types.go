// Code generated by goa v3.0.9, DO NOT EDIT.
//
// upload HTTP server types
//
// Command:
// $ goa gen goa.design/examples/tus/design

package server

import (
	upload "goa.design/examples/tus/gen/upload"
	goa "goa.design/goa/v3/pkg"
)

// PatchInvalidContentTypeResponseBody is the type of the "upload" service
// "patch" endpoint HTTP response body for the "InvalidContentType" error.
type PatchInvalidContentTypeResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PatchInvalidOffsetResponseBody is the type of the "upload" service "patch"
// endpoint HTTP response body for the "InvalidOffset" error.
type PatchInvalidOffsetResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PatchNotFoundResponseBody is the type of the "upload" service "patch"
// endpoint HTTP response body for the "NotFound" error.
type PatchNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PatchInvalidChecksumAlgorithmResponseBody is the type of the "upload"
// service "patch" endpoint HTTP response body for the
// "InvalidChecksumAlgorithm" error.
type PatchInvalidChecksumAlgorithmResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PatchChecksumMismatchResponseBody is the type of the "upload" service
// "patch" endpoint HTTP response body for the "ChecksumMismatch" error.
type PatchChecksumMismatchResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PostInvalidDeferLengthResponseBody is the type of the "upload" service
// "post" endpoint HTTP response body for the "InvalidDeferLength" error.
type PostInvalidDeferLengthResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PostInvalidChecksumAlgorithmResponseBody is the type of the "upload" service
// "post" endpoint HTTP response body for the "InvalidChecksumAlgorithm" error.
type PostInvalidChecksumAlgorithmResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PostMaximumSizeExceededResponseBody is the type of the "upload" service
// "post" endpoint HTTP response body for the "MaximumSizeExceeded" error.
type PostMaximumSizeExceededResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PostChecksumMismatchResponseBody is the type of the "upload" service "post"
// endpoint HTTP response body for the "ChecksumMismatch" error.
type PostChecksumMismatchResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteNotFoundResponseBody is the type of the "upload" service "delete"
// endpoint HTTP response body for the "NotFound" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewPatchInvalidContentTypeResponseBody builds the HTTP response body from
// the result of the "patch" endpoint of the "upload" service.
func NewPatchInvalidContentTypeResponseBody(res *goa.ServiceError) *PatchInvalidContentTypeResponseBody {
	body := &PatchInvalidContentTypeResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPatchInvalidOffsetResponseBody builds the HTTP response body from the
// result of the "patch" endpoint of the "upload" service.
func NewPatchInvalidOffsetResponseBody(res *goa.ServiceError) *PatchInvalidOffsetResponseBody {
	body := &PatchInvalidOffsetResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPatchNotFoundResponseBody builds the HTTP response body from the result
// of the "patch" endpoint of the "upload" service.
func NewPatchNotFoundResponseBody(res *goa.ServiceError) *PatchNotFoundResponseBody {
	body := &PatchNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPatchInvalidChecksumAlgorithmResponseBody builds the HTTP response body
// from the result of the "patch" endpoint of the "upload" service.
func NewPatchInvalidChecksumAlgorithmResponseBody(res *goa.ServiceError) *PatchInvalidChecksumAlgorithmResponseBody {
	body := &PatchInvalidChecksumAlgorithmResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPatchChecksumMismatchResponseBody builds the HTTP response body from the
// result of the "patch" endpoint of the "upload" service.
func NewPatchChecksumMismatchResponseBody(res *goa.ServiceError) *PatchChecksumMismatchResponseBody {
	body := &PatchChecksumMismatchResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPostInvalidDeferLengthResponseBody builds the HTTP response body from the
// result of the "post" endpoint of the "upload" service.
func NewPostInvalidDeferLengthResponseBody(res *goa.ServiceError) *PostInvalidDeferLengthResponseBody {
	body := &PostInvalidDeferLengthResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPostInvalidChecksumAlgorithmResponseBody builds the HTTP response body
// from the result of the "post" endpoint of the "upload" service.
func NewPostInvalidChecksumAlgorithmResponseBody(res *goa.ServiceError) *PostInvalidChecksumAlgorithmResponseBody {
	body := &PostInvalidChecksumAlgorithmResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPostMaximumSizeExceededResponseBody builds the HTTP response body from
// the result of the "post" endpoint of the "upload" service.
func NewPostMaximumSizeExceededResponseBody(res *goa.ServiceError) *PostMaximumSizeExceededResponseBody {
	body := &PostMaximumSizeExceededResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPostChecksumMismatchResponseBody builds the HTTP response body from the
// result of the "post" endpoint of the "upload" service.
func NewPostChecksumMismatchResponseBody(res *goa.ServiceError) *PostChecksumMismatchResponseBody {
	body := &PostChecksumMismatchResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "upload" service.
func NewDeleteNotFoundResponseBody(res *goa.ServiceError) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewHeadPayload builds a upload service head endpoint payload.
func NewHeadPayload(id string, tusResumable string, uploadOffset *uint) *upload.HeadPayload {
	return &upload.HeadPayload{
		ID:           id,
		TusResumable: tusResumable,
		UploadOffset: uploadOffset,
	}
}

// NewPatchPayload builds a upload service patch endpoint payload.
func NewPatchPayload(body []byte, id string, tusResumable string, uploadOffset uint, uploadChecksum *string) *upload.PatchPayload {
	v := body
	res := &upload.PatchPayload{
		Content: v,
	}
	res.ID = &id
	res.TusResumable = tusResumable
	res.UploadOffset = uploadOffset
	res.UploadChecksum = uploadChecksum
	return res
}

// NewPostPayload builds a upload service post endpoint payload.
func NewPostPayload(body []byte, tusResumable string, uploadDeferLength *int, uploadChecksum *string, tusMaxSize *uint) *upload.PostPayload {
	v := body
	res := &upload.PostPayload{
		Content: v,
	}
	res.TusResumable = tusResumable
	res.UploadDeferLength = uploadDeferLength
	res.UploadChecksum = uploadChecksum
	res.TusMaxSize = tusMaxSize
	return res
}

// NewDeletePayload builds a upload service delete endpoint payload.
func NewDeletePayload(id string, tusResumable string) *upload.DeletePayload {
	return &upload.DeletePayload{
		ID:           id,
		TusResumable: tusResumable,
	}
}

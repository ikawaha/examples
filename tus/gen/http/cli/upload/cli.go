// Code generated by goa v3.0.9, DO NOT EDIT.
//
// Upload HTTP client CLI support package
//
// Command:
// $ goa gen goa.design/examples/tus/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	uploadc "goa.design/examples/tus/gen/http/upload/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `upload (head|patch|options|post|delete)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` upload head --id "666dfedc1646ac7a507aa76ebaa109b8" --tus-resumable "1.0.0" --upload-offset 14668360370687589685` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		uploadFlags = flag.NewFlagSet("upload", flag.ContinueOnError)

		uploadHeadFlags            = flag.NewFlagSet("head", flag.ExitOnError)
		uploadHeadIDFlag           = uploadHeadFlags.String("id", "REQUIRED", "id is the unique upload identifier.")
		uploadHeadTusResumableFlag = uploadHeadFlags.String("tus-resumable", "REQUIRED", "")
		uploadHeadUploadOffsetFlag = uploadHeadFlags.String("upload-offset", "", "")

		uploadPatchFlags              = flag.NewFlagSet("patch", flag.ExitOnError)
		uploadPatchBodyFlag           = uploadPatchFlags.String("body", "REQUIRED", "")
		uploadPatchIDFlag             = uploadPatchFlags.String("id", "REQUIRED", "id is the unique upload identifier.")
		uploadPatchTusResumableFlag   = uploadPatchFlags.String("tus-resumable", "REQUIRED", "")
		uploadPatchUploadOffsetFlag   = uploadPatchFlags.String("upload-offset", "REQUIRED", "")
		uploadPatchUploadChecksumFlag = uploadPatchFlags.String("upload-checksum", "", "")

		uploadOptionsFlags = flag.NewFlagSet("options", flag.ExitOnError)

		uploadPostFlags                 = flag.NewFlagSet("post", flag.ExitOnError)
		uploadPostBodyFlag              = uploadPostFlags.String("body", "REQUIRED", "")
		uploadPostTusResumableFlag      = uploadPostFlags.String("tus-resumable", "REQUIRED", "")
		uploadPostUploadDeferLengthFlag = uploadPostFlags.String("upload-defer-length", "", "")
		uploadPostUploadChecksumFlag    = uploadPostFlags.String("upload-checksum", "", "")
		uploadPostTusMaxSizeFlag        = uploadPostFlags.String("tus-max-size", "", "")

		uploadDeleteFlags            = flag.NewFlagSet("delete", flag.ExitOnError)
		uploadDeleteIDFlag           = uploadDeleteFlags.String("id", "REQUIRED", "id is the unique upload identifier.")
		uploadDeleteTusResumableFlag = uploadDeleteFlags.String("tus-resumable", "REQUIRED", "")
	)
	uploadFlags.Usage = uploadUsage
	uploadHeadFlags.Usage = uploadHeadUsage
	uploadPatchFlags.Usage = uploadPatchUsage
	uploadOptionsFlags.Usage = uploadOptionsUsage
	uploadPostFlags.Usage = uploadPostUsage
	uploadDeleteFlags.Usage = uploadDeleteUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "upload":
			svcf = uploadFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "upload":
			switch epn {
			case "head":
				epf = uploadHeadFlags

			case "patch":
				epf = uploadPatchFlags

			case "options":
				epf = uploadOptionsFlags

			case "post":
				epf = uploadPostFlags

			case "delete":
				epf = uploadDeleteFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "upload":
			c := uploadc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "head":
				endpoint = c.Head()
				data, err = uploadc.BuildHeadPayload(*uploadHeadIDFlag, *uploadHeadTusResumableFlag, *uploadHeadUploadOffsetFlag)
			case "patch":
				endpoint = c.Patch()
				data, err = uploadc.BuildPatchPayload(*uploadPatchBodyFlag, *uploadPatchIDFlag, *uploadPatchTusResumableFlag, *uploadPatchUploadOffsetFlag, *uploadPatchUploadChecksumFlag)
			case "options":
				endpoint = c.Options()
				data = nil
			case "post":
				endpoint = c.Post()
				data, err = uploadc.BuildPostPayload(*uploadPostBodyFlag, *uploadPostTusResumableFlag, *uploadPostUploadDeferLengthFlag, *uploadPostUploadChecksumFlag, *uploadPostTusMaxSizeFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = uploadc.BuildDeletePayload(*uploadDeleteIDFlag, *uploadDeleteTusResumableFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// uploadUsage displays the usage of the upload command and its subcommands.
func uploadUsage() {
	fmt.Fprintf(os.Stderr, `The upload service exposes the methods required to implement the tus protocol
Usage:
    %s [globalflags] upload COMMAND [flags]

COMMAND:
    head: Clients use the HEAD request to determine the offset at which the upload should be continued.
    patch: Clients use the PATCH method to start or resume an upload.
    options: Clients use the OPTIONS method to gather information about the Server’s current configuration.
    post: Clients use the POST method against a known upload creation URL to request a new upload resource.
    delete: Clients use the DELETE method to terminate completed and unfinished uploads allowing the Server to free up used resources.

Additional help:
    %s upload COMMAND --help
`, os.Args[0], os.Args[0])
}
func uploadHeadUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] upload head -id STRING -tus-resumable STRING -upload-offset UINT

Clients use the HEAD request to determine the offset at which the upload should be continued.
    -id STRING: id is the unique upload identifier.
    -tus-resumable STRING: 
    -upload-offset UINT: 

Example:
    `+os.Args[0]+` upload head --id "666dfedc1646ac7a507aa76ebaa109b8" --tus-resumable "1.0.0" --upload-offset 14668360370687589685
`, os.Args[0])
}

func uploadPatchUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] upload patch -body STRING -id STRING -tus-resumable STRING -upload-offset UINT -upload-checksum STRING

Clients use the PATCH method to start or resume an upload.
    -body STRING: 
    -id STRING: id is the unique upload identifier.
    -tus-resumable STRING: 
    -upload-offset UINT: 
    -upload-checksum STRING: 

Example:
    `+os.Args[0]+` upload patch --body "RXQgaW1wZWRpdCB2aXRhZSBuaWhpbC4=" --id "844e3408e54c83d5b8e764c0c7ca3d11" --tus-resumable "1.0.0" --upload-offset 17132572726449409173 --upload-checksum "sha1 Kq5sNclPz7QV2+lfQIuc6R7oRu0="
`, os.Args[0])
}

func uploadOptionsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] upload options

Clients use the OPTIONS method to gather information about the Server’s current configuration.

Example:
    `+os.Args[0]+` upload options
`, os.Args[0])
}

func uploadPostUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] upload post -body STRING -tus-resumable STRING -upload-defer-length INT -upload-checksum STRING -tus-max-size UINT

Clients use the POST method against a known upload creation URL to request a new upload resource.
    -body STRING: 
    -tus-resumable STRING: 
    -upload-defer-length INT: 
    -upload-checksum STRING: 
    -tus-max-size UINT: 

Example:
    `+os.Args[0]+` upload post --body "QXV0IGNvcnJ1cHRpIHJlcHJlaGVuZGVyaXQgZG9sb3JpYnVzIGRlYml0aXMgZG9sb3JlcyB0ZW1wb3JpYnVzLg==" --tus-resumable "1.0.0" --upload-defer-length 1 --upload-checksum "sha1 Kq5sNclPz7QV2+lfQIuc6R7oRu0=" --tus-max-size 5390496776787623334
`, os.Args[0])
}

func uploadDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] upload delete -id STRING -tus-resumable STRING

Clients use the DELETE method to terminate completed and unfinished uploads allowing the Server to free up used resources.
    -id STRING: id is the unique upload identifier.
    -tus-resumable STRING: 

Example:
    `+os.Args[0]+` upload delete --id "3ef6a40e2eb0adc802e1e090030a8f3f" --tus-resumable "1.0.0"
`, os.Args[0])
}

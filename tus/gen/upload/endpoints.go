// Code generated by goa v3.0.9, DO NOT EDIT.
//
// upload endpoints
//
// Command:
// $ goa gen goa.design/examples/tus/design

package upload

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "upload" service endpoints.
type Endpoints struct {
	Head    goa.Endpoint
	Patch   goa.Endpoint
	Options goa.Endpoint
	Post    goa.Endpoint
	Delete  goa.Endpoint
}

// NewEndpoints wraps the methods of the "upload" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Head:    NewHeadEndpoint(s),
		Patch:   NewPatchEndpoint(s),
		Options: NewOptionsEndpoint(s),
		Post:    NewPostEndpoint(s),
		Delete:  NewDeleteEndpoint(s),
	}
}

// Use applies the given middleware to all the "upload" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Head = m(e.Head)
	e.Patch = m(e.Patch)
	e.Options = m(e.Options)
	e.Post = m(e.Post)
	e.Delete = m(e.Delete)
}

// NewHeadEndpoint returns an endpoint function that calls the method "head" of
// service "upload".
func NewHeadEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*HeadPayload)
		return s.Head(ctx, p)
	}
}

// NewPatchEndpoint returns an endpoint function that calls the method "patch"
// of service "upload".
func NewPatchEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*PatchPayload)
		return s.Patch(ctx, p)
	}
}

// NewOptionsEndpoint returns an endpoint function that calls the method
// "options" of service "upload".
func NewOptionsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Options(ctx)
	}
}

// NewPostEndpoint returns an endpoint function that calls the method "post" of
// service "upload".
func NewPostEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*PostPayload)
		return s.Post(ctx, p)
	}
}

// NewDeleteEndpoint returns an endpoint function that calls the method
// "delete" of service "upload".
func NewDeleteEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeletePayload)
		return s.Delete(ctx, p)
	}
}

// Code generated by goa v3.2.4, DO NOT EDIT.
//
// asset HTTP client encoders and decoders
//
// Command:
// $ goa gen goa.design/examples/embed_files/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strconv"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildPublicRequest instantiates a HTTP request object with method and path
// set to call the "asset" service "public" endpoint
func (c *Client) BuildPublicRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		filename string
	)
	{
		p, ok := v.(string)
		if !ok {
			return nil, goahttp.ErrInvalidType("asset", "public", "string", v)
		}
		filename = p
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PublicAssetPath(filename)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("asset", "public", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodePublicResponse returns a decoder for responses returned by the asset
// public endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodePublicResponse may return the following errors:
//	- "invalid_file_path" (type *goa.ServiceError): http.StatusNotFound
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodePublicResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				length      int64
				contentType *string
				err         error
			)
			{
				lengthRaw := resp.Header.Get("Content-Length")
				if lengthRaw == "" {
					return nil, goahttp.ErrValidationError("asset", "public", goa.MissingFieldError("Content-Length", "header"))
				}
				v, err2 := strconv.ParseInt(lengthRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("length", lengthRaw, "integer"))
				}
				length = v
			}
			contentTypeRaw := resp.Header.Get("Content-Type")
			if contentTypeRaw != "" {
				contentType = &contentTypeRaw
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("asset", "public", err)
			}
			res := NewPublicResultOK(length, contentType)
			return res, nil
		case http.StatusNotFound:
			var (
				body PublicInvalidFilePathResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("asset", "public", err)
			}
			err = ValidatePublicInvalidFilePathResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("asset", "public", err)
			}
			return nil, NewPublicInvalidFilePath(&body)
		case http.StatusInternalServerError:
			var (
				body PublicInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("asset", "public", err)
			}
			err = ValidatePublicInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("asset", "public", err)
			}
			return nil, NewPublicInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("asset", "public", resp.StatusCode, string(body))
		}
	}
}

// Code generated by goa v3.0.9, DO NOT EDIT.
//
// upload client
//
// Command:
// $ goa gen goa.design/examples/tus/design

package upload

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "upload" service client.
type Client struct {
	HeadEndpoint    goa.Endpoint
	PatchEndpoint   goa.Endpoint
	OptionsEndpoint goa.Endpoint
	PostEndpoint    goa.Endpoint
	DeleteEndpoint  goa.Endpoint
}

// NewClient initializes a "upload" service client given the endpoints.
func NewClient(head, patch, options, post, delete_ goa.Endpoint) *Client {
	return &Client{
		HeadEndpoint:    head,
		PatchEndpoint:   patch,
		OptionsEndpoint: options,
		PostEndpoint:    post,
		DeleteEndpoint:  delete_,
	}
}

// Head calls the "head" endpoint of the "upload" service.
func (c *Client) Head(ctx context.Context, p *HeadPayload) (res *HeadResult, err error) {
	var ires interface{}
	ires, err = c.HeadEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*HeadResult), nil
}

// Patch calls the "patch" endpoint of the "upload" service.
// Patch may return the following errors:
//	- "InvalidContentType" (type *goa.ServiceError): All PATCH requests MUST use Content-Type: application/offset+octet-stream, otherwise the server SHOULD return a 415 Unsupported Media Type status.
//	- "InvalidOffset" (type *goa.ServiceError): If the offsets do not match, the Server MUST respond with the 409 Conflict status without modifying the upload resource.
//	- "NotFound" (type *goa.ServiceError): If the server receives a PATCH request against a non-existent resource it SHOULD return a 404 Not Found status.
//	- "InvalidChecksumAlgorithm" (type *goa.ServiceError): The checksum algorithm is not supported by the server.
//	- "ChecksumMismatch" (type *goa.ServiceError): The checksums mismatch.
//	- error: internal error
func (c *Client) Patch(ctx context.Context, p *PatchPayload) (res *PatchResult, err error) {
	var ires interface{}
	ires, err = c.PatchEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*PatchResult), nil
}

// Options calls the "options" endpoint of the "upload" service.
func (c *Client) Options(ctx context.Context) (res *OptionsResult, err error) {
	var ires interface{}
	ires, err = c.OptionsEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*OptionsResult), nil
}

// Post calls the "post" endpoint of the "upload" service.
// Post may return the following errors:
//	- "InvalidDeferLength" (type *goa.ServiceError): If the Upload-Defer-Length header contains any other value than 1 the server should return a 400 Bad Request status.
//	- "MaximumSizeExceeded" (type *goa.ServiceError): If the length of the upload exceeds the maximum, which MAY be specified using the Tus-Max-Size header, the Server MUST respond with the 413 Request Entity Too Large status.
//	- "InvalidChecksumAlgorithm" (type *goa.ServiceError): The checksum algorithm is not supported by the server.
//	- "ChecksumMismatch" (type *goa.ServiceError): The checksums mismatch.
//	- error: internal error
func (c *Client) Post(ctx context.Context, p *PostPayload) (res *PostResult, err error) {
	var ires interface{}
	ires, err = c.PostEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*PostResult), nil
}

// Delete calls the "delete" endpoint of the "upload" service.
// Delete may return the following errors:
//	- "NotFound" (type *goa.ServiceError): For all future requests to this URL, the Server SHOULD respond with the 404 Not Found.
//	- error: internal error
func (c *Client) Delete(ctx context.Context, p *DeletePayload) (res *DeleteResult, err error) {
	var ires interface{}
	ires, err = c.DeleteEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*DeleteResult), nil
}
